
user   www  www;
worker_processes  1;

events {
        worker_connections  1024;
}

http {
        include /opt/local/etc/nginx/mime.types;
        default_type application/octet-stream;

        sendfile          on;
        keepalive_timeout 65;
        access_log        off;
        server {
                listen 127.0.0.1:80;
                server_name localhost;
                location /nginx_status {
                        stub_status on;
                        access_log   off;
                        allow 127.0.0.1;
                        deny all;
                }
        }
        server {
                listen      80;
                listen [::]:80;
                server_name _;
                location /.well-known/acme-challenge/ { root /var/letsencrypt/acme/; }
                return 301 https://$host$request_uri;
        }
        server {
                listen      443 ssl;
                listen [::]:443 ssl;
                server_name _;

                location /.well-known/acme-challenge/ { root /var/letsencrypt/acme/; }
                # Needed to allow the websockets to forward well.
                # Information adopted from here:
                # https://community.ubnt.com/t5/EdgeMAX/Access-Edgemax-gui-via-nginx-reverse-proxy-websocket-problem/td-p/1544354
                location /wss/ {
                    proxy_pass https://localhost:8443;
                    proxy_http_version 1.1;
                    proxy_buffering off;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection "Upgrade";
                    proxy_read_timeout 86400;
                }

                location / {
                    proxy_pass https://localhost:8443/; # The Unifi Controller Port
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forward-For $proxy_add_x_forwarded_for;
                }

                # Unifi still internally uses its own cert. This was converted to PEM and
                # is trusted for the sake of this proxy. See here for details:
                # https://community.ubnt.com/t5/UniFi-Wireless/Lets-Encrypt-and-UniFi-controller/td-p/1406670
                # ssl_trusted_certificate /etc/nginx/ssl/unifi/unifi-default-selfsign.pem;

                ssl_certificate     ssl/nginx.pem;
                ssl_certificate_key ssl/nginx.pem;
        }
}

